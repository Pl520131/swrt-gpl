#!/tmp/wireless/lantiq/bin/sh
# Configure AccessPoint.WPS parameters
# Needed object: AccessPoint.WPS, AccessPoint.X_LANTIQ_COM_Vendor.WPS

export PATH=/tmp/wireless/lantiq/bin/:$PATH
script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$LIB_CONVERT_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_convert.sh
[ ! "$LIB_WPS_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_wps.sh

interface_name=$1
pid=$$

radio_name=${interface_name%%.*}
if [ -e "$INIT_FLAG" ] && [ -e ${USE_CURRENT_CONF}_${radio_name} ]
then
	echo "####### $script_name: init flow with conf from previous setting" > /dev/console
	# Create the output configuration file
	cat /dev/null > ${OUT_CONF}

	# Configuration is completed successfully
	update_conf_out "wlan_configuration_status" "success"
	exit 0
fi

# Find the interface index and the radio index
interface_index=`find_index_from_interface_name $interface_name`
radio_index=`find_index_from_interface_name $radio_name`

print2log $radio_index DEBUG "$script_name $*"
timestamp $radio_index "$script_name:$interface_name:begin"

if [ -e ${CONF_DIR} ]
then
	# Delete '.' at the end of object - if exist
	sed -i 's=/[^/]*$==;s/\.$//' ${IN_CONF}
fi

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${TEMP_DIR}/wps_set_in_conf_${interface_name}

# Map the objects indexes to the received objects in the in.conf file
wps_index=`map_param_index Object $ACCESSPOINT_WPS_OBJECT`
wps_vendor_index=`map_param_index Object $RADIO_WPS_VENDOR_OBJECT`
device_info_index=`map_param_index Object $DEVICE_INFO_OBJECT`

# Save the input configuration parameters to a local DB used by Wave FAPI
# WPS Enable is in VAP object. Other configuration is in Radio object.
# Enable is used to set wps_config_state
[ -n "$wps_index" ] && save_db_params wps_set $interface_name $wps_index $interface_index
#[ -n "$wps_vendor_index" ] && save_db_params wps_set $interface_name $wps_vendor_index $radio_index
[ -n "$wps_vendor_index" ] && save_db_params wps_set $interface_name $wps_vendor_index $interface_index
[ -n "$device_info_index" ] && save_db_params wps_set $interface_name $device_info_index $interface_index

# Source RADIO, ACCESSPOINT, SSID and WPS conf DBs
local_db_source RADIO
local_db_source ACCESSPOINT
local_db_source SSID
local_db_source WPS

comment="___WPS_parameters___###"

# Define list of WPS parameters
hostapd_params="wps_state
ap_setup_locked
uuid
wps_pin_requests
device_name
manufacturer
model_name
model_number
serial_number
device_type
os_version
config_methods
ap_pin
wps_cred_processing
wps_rf_bands
pbc_in_m1
upnp_iface
friendly_name
manufacturer_url
model_description"

# Check if an action was called instead of a configuration
wps_action=`db2fapi_convert regular WPSAction $interface_index`

# Create the output configuration file
cat /dev/null > ${OUT_CONF}

case "$wps_action" in
	"PBC")
		# If WPS is in Unconfigured state, set flag (for external registrar)
		wps_state=`read_wps_for_vap_name_from_hostapd $interface_name $radio_name`
		if [ "$wps_state" = "wps_state=1" ]
		then
			echo $interface_name >> ${WPS_IN_PROGRESS_UNCONF_STATE}
		fi
		wps_connect_via_pbc $interface_name $radio_name $wps_vendor_index
		;;
	"PIN")
		# If WPS is in Unconfigured state, set flag (for external registrar)
		wps_state=`read_wps_for_vap_name_from_hostapd $interface_name $radio_name`
		if [ "$wps_state" = "wps_state=1" ]
		then
			echo $interface_name >> ${WPS_IN_PROGRESS_UNCONF_STATE}
		fi
		wps_connect_via_pin $interface_index $interface_name $radio_name $wps_vendor_index
		;;
	"GeneratePIN")
		update_conf_out "Object_${wps_vendor_index}" "$RADIO_WPS_VENDOR_OBJECT"
		wps_generate_pin $interface_name $radio_name $wps_vendor_index
		;;
	"CancelWPS")
		cancel_wps $interface_name $radio_name
		handle_extra_actions $interface_name
		;;
	*)
		# Prepare the temporary configuration files to use
		prepare_confs $interface_name $radio_name $pid $VAP
		# Get the pid to use in this configuration session
		. ${CONF_IN_PROGRESS}_${radio_name}

		# Read current values and initiate new values file.
		hostapd_vap_current_values=${CONF_DIR}/hostapd_vap_current_values_${interface_name}_${pid}

		read_current_values $HOSTAPD_VAP_CONF_PREFIX $interface_name $hostapd_vap_current_values
		#wps_state=`convert_wps_state $interface_index $radio_index $wps_action`
		wps_state=`convert_wps_state $interface_index $interface_index $wps_action`
		ap_setup_locked=""
		uuid=""
		wps_pin_requests=""
		device_name=""
		manufacturer=""
		model_name=""
		model_number=""
		serial_number=""
		device_type=""
		os_version=""
		config_methods=""
		ap_pin=""
		wps_cred_processing=""
		wps_rf_bands=""
		pbc_in_m1=""
		upnp_iface=""
		friendly_name=""
		manufacturer_url=""
		model_description=""
		
		# Configure WPS parameters only if WPS is enabled
		if [ "$wps_state" -ne "0" ] #Arad: should remove "" ?
		then
			ap_setup_locked=0
			uuid=`read_uuid $interface_index`
			wps_pin_requests="$HOSTAPD_PIN_REQ"
			device_name=`db2fapi_convert regular DeviceName $interface_index`
			manufacturer=`db2fapi_convert regular Manufacturer $interface_index`
			model_name=`db2fapi_convert regular ModelName $interface_index`
			# model_name length is up to 32 chars
			model_name=${model_name:0:32}
			model_number=`db2fapi_convert regular ModelNumber $interface_index`
			serial_number=`db2fapi_convert regular SerialNumber $interface_index`
			device_type="6-0050F204-1"
			os_version="01020300"
			config_methods=`db2fapi_convert regular WPS2ConfigMethodsEnabled $interface_index`
			wps_cred_processing=2
			#wps_rf_bands=`convert_wps_rf_bands $interface_index $radio_index`
			#wps_rf_bands_dual=`db2fapi_convert boolean WpsDualBands $radio_index`
			wps_rf_bands_dual=`db2fapi_convert boolean WpsDualBands $interface_index`
			if [ "$wps_rf_bands_dual" = "1" ]
			then
				wps_rf_bands="ag"
			else
				#wps_rf_bands=`convert_wps_rf_bands $interface_index $radio_index`
				wps_rf_bands=`convert_wps_rf_bands $interface_index $interface_index`
			fi
			ap_pin=`db2fapi_convert regular PIN $interface_index`
			pbc_in_m1=1

			# Set upnp_iface only if bridge exists and it has an IP
			bridge_name=`db2fapi_convert regular X_LANTIQ_COM_Vendor_BridgeName $interface_index`
			if [ ! -z "`brctl show | grep -w ${bridge_name}`" ] && [ `ifconfig $bridge_name | grep "inet addr:" -c` -gt 0 ]
			then
				upnp_iface=${bridge_name}
			fi
			friendly_name="$model_name"
			manufacturer_url=`db2fapi_convert regular ManufacturerUrl $interface_index`
			model_description=`db2fapi_convert regular Description $interface_index`
		fi

		# Check if a hostapd parameter was changed.
		hostapd_changed=`check_param_changed "$hostapd_params"`

		# If a hostapd vap parameter was changed, remove wps parameters from hostapd_vap temp conf file and write all of them with updated values.
		if [ "$hostapd_changed" ]
		then
			hostapd_vap_conf_name=${CONF_DIR}/hostapd_vap_${interface_name}_${pid}.conf
			remove_params_from_conf "###$comment $hostapd_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX

			# Write the hostapd vap wps parameters.
			set_conf_param hostapd_vap comment otf $pid $interface_name comment "$comment"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name wps_state "$wps_state"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name ap_setup_locked "$ap_setup_locked"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name uuid "$uuid"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name wps_pin_requests "$wps_pin_requests"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name device_name "$device_name"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name manufacturer "$manufacturer"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name model_name "$model_name"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name model_number "$model_number"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name serial_number "$serial_number"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name device_type "$device_type"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name os_version "$os_version"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name config_methods "$config_methods"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name ap_pin "$ap_pin"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name wps_cred_processing "$wps_cred_processing"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name wps_rf_bands "$wps_rf_bands"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name pbc_in_m1 "$pbc_in_m1"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name upnp_iface "$upnp_iface"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name friendly_name "$friendly_name"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name manufacturer_url "$manufacturer_url"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name model_description "$model_description"
		fi
		;;
esac

# Set UUID to XML if it was generated in this script
if [ -n "$uuid" ] && [ -n "$wps_vendor_index" ]
then
	update_conf_out "Object_${wps_vendor_index}" "$RADIO_WPS_VENDOR_OBJECT"
	update_conf_out "UUID_${wps_vendor_index}" "$uuid"
fi

update_conf_out "Object_${wps_vendor_index}" "$RADIO_WPS_VENDOR_OBJECT"
if [ "$wps_rf_bands_dual" = "1" ] && [ -n "$wps_vendor_index" ]
then
	update_conf_out "WpsDualBands_${wps_vendor_index}" "true"
else
	update_conf_out "WpsDualBands_${wps_vendor_index}" "false"
fi

# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${TEMP_DIR}/wps_set_out_conf_${interface_name}

# If the action is reset WPS, call the up script to restart the interfaces (SL doesn't do that)
[ "$wps_action" = "ResetWPS" ] && ${ETC_PATH}/fapi_wlan_wave_up $radio_name

# Must delete WPSAction from local WPS dB
sed -i '/^WPSAction_.=.*/d' $WPS_CONF

print2log $radio_index DEBUG "$script_name done"
timestamp $radio_index "$script_name:$interface_name:done"
