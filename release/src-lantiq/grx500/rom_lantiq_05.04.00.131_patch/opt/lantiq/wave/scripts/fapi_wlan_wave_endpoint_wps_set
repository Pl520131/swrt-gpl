#!/tmp/wireless/lantiq/bin/sh
# Configure Endpoint.WPS parameters
# Needed object: Endpoint.WPS
# fapi_wlan_wave_endpoint_wps_set

export PATH=/tmp/wireless/lantiq/bin/:$PATH
script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$LIB_CONVERT_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_convert.sh

interface_name=$1

# Find the interface index and the radio index
interface_index=`find_index_from_interface_name $interface_name`
radio_name=`get_radio_name_from_endpoint $interface_name`
radio_index=`find_index_from_interface_name $radio_name`

print2log $radio_index DEBUG "$script_name $*"
timestamp $radio_index "$script_name:$interface_name:begin"

#if [ -e ${CONF_DIR} ]
#then
#	# Delete '.' at the end of object - if exist
#	sed -i 's=/[^/]*$==;s/\.$//' ${IN_CONF}
#fi

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${TEMP_DIR}/endpoint_wps_set_in_conf_${interface_name}

# Map the objects indexes to the received objects in the in.conf file
endpoint_wps_index=`map_param_index Object $ENDPOINT_WPS_OBJECT`

# Save the input configuration parameters to a local DB used by Wave FAPI
[ -n "$endpoint_wps_index" ] && save_db_params endpoint_wps_set $interface_name $endpoint_wps_index $interface_index

# Source needed DB
local_db_source ENDPOINT_WPS

# Create the output configuration file
cat /dev/null > ${OUT_CONF}

wps_connect_via_pbc()
{
	wpa_cli -i $interface_name wps_pbc
	# No In_Progress event recieve from supplicant, therefore create it here
	build_wlan_notification "wsd" "NOTIFY_WPS_STATUS" "message:In_Progress"
	# Check the wpa_cli state, when reached INACTIVE, set Timeout
	wps_timeout=0
	while [ `wpa_cli -i${interface_name} status 2>/dev/null | grep wpa_state=SCANNING -c` -eq 1 ]
	do
		sleep 1
	done
	wpa_state=`wpa_cli -i${interface_name} status 2>/dev/null | grep wpa_state=`
	wpa_state=${wpa_state##*=}
	if [ "$wpa_state" = "INACTIVE" ]
	then
		build_wlan_notification "wsd" "NOTIFY_WPS_STATUS" "message:Timeout"
	fi
	#build_wlan_notification "servd" "NOTIFY_WIFI_WPS_STATUS" "Name:${interface_name} Status:In_Progress"
	build_wlan_notification "servd" "NOTIFY_WIFI_UPDATE_PARAM" "Name:$interface_name Object:${ENDPOINT_WPS_OBJECT} X_LANTIQ_COM_Vendor_WPSStatus:In_Progress"
}

wps_connect_via_pin()
{
	enrollee_PIN=$1
	if [ -n "$enrollee_PIN" ]
	then
		wpa_cli -i $interface_name wps_pin any $enrollee_PIN
		# No In_Progress event recieve from supplicant, therefore create it here
		build_wlan_notification "wsd" "NOTIFY_WPS_STATUS" "message:In_Progress"
		#build_wlan_notification "servd" "NOTIFY_WIFI_WPS_STATUS" "Name:${interface_name} Status:In_Progress"
		build_wlan_notification "servd" "NOTIFY_WIFI_UPDATE_PARAM" "Name:$interface_name Object:${ENDPOINT_WPS_OBJECT} X_LANTIQ_COM_Vendor_WPSStatus:In_Progress"
	else
		print2log $ap_index ERROR "missing enrollee_PIN in WPS PIN action"
	fi
}

#cancel_wps()
# {
#	wpa_cli -i $interface_name wps_cancel
#}

# Check if an action was called instead of a configuration
wps_action=`db2fapi_convert regular X_LANTIQ_COM_Vendor_WPSAction $interface_index`

case "$wps_action" in
	"PBC")
		wps_connect_via_pbc
		;;
	"PIN")
		enrollee_PIN=`db2fapi_convert regular X_LANTIQ_COM_Vendor_EndpointPIN $interface_index`
		wps_connect_via_pin $enrollee_PIN
		;;
#	"CancelWPS")
#		cancel_wps
#		;;
	*)
		echo "$script_name: Action not supported" > /dev/console
		;;
esac


# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${TEMP_DIR}/endpoint_wps_set_out_conf_${interface_name}

# Must delete WPSAction from local WPS dB
sed -i '/^WPSAction_.=.*/d' $WPS_CONF

print2log $radio_index DEBUG "$script_name done"
timestamp $radio_index "$script_name:$interface_name:done"
