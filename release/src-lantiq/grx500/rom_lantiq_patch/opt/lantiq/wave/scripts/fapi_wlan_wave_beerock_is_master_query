#!/bin/sh
# Return if BeeRock is master
# Needed object: None

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh

interface_name=$1

# Find the radio index
radio_index=`find_index_from_interface_name $interface_name`

# If interface name is not supplied, exit script
[ -z "$interface_name" ] && print2log $radio_index ALERT "$script_name: interface_name is missing. exit execution" && exit 1

local_db_source RADIO

# Source config.sh on UGW:
[ -e /etc/rc.d/config.sh ] && . /etc/rc.d/config.sh

print2log $radio_index DEBUG "$script_name $*"
timestamp $radio_index "$script_name:begin"

[ -n "$CONFIG_IFX_MODEL_NAME" ] && echo "$script_name CONFIG_IFX_MODEL_NAME = $CONFIG_IFX_MODEL_NAME" > /dev/console

beerock_is_master=`db2fapi_convert regular BeeRockMasterEnabled $radio_index`

# if GW then auto/true will be master else false will be GW as slave
if [ $beerock_is_master = "Auto" ]; then
	# if IRE then auto/false will be slave else true will be IRE as master
	if [ `echo "$CONFIG_IFX_MODEL_NAME" | grep IRE` ]; then
			beerock_is_master="false"
	else
			beerock_is_master="true"
	fi
fi

echo "$script_name $CONFIG_IFX_MODEL_NAME --> beerock_is_master=$beerock_is_master" > /dev/console

# Create the output configuration file and add state value
cat /dev/null > ${OUT_CONF}
update_conf_out "Object_0" "$RADIO_VENDOR_OBJECT"
update_conf_out "BeeRockMasterEnabled_0" "$beerock_is_master"

# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${CONF_DIR}/beerock_is_master_query_${interface_name}

print2log $radio_index DEBUG "$script_name done"
timestamp $radio_index "$script_name:$interface_name:done"
