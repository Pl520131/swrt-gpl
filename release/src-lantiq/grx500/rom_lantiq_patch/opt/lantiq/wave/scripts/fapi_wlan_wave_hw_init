#!/bin/sh
# Prepare Wave environment and initiate Wave drivers
# Needed object: Radio.Vendor

script_name="$0"

if [ -e /opt/lantiq/wave/scripts/fapi_wlan_wave_lib_common.sh ]
then
	. /opt/lantiq/wave/scripts/fapi_wlan_wave_lib_common.sh
elif [ -e /etc/wave/scripts/fapi_wlan_wave_lib_common.sh ]
then
	. /etc/wave/scripts/fapi_wlan_wave_lib_common.sh
fi

mkdir -p $CONF_DIR

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${CONF_DIR}/hw_init_in_conf

# Save the input configuration parameters to a local DB used by Wave FAPI and source it
save_db_params hw_init
local_db_source RADIO
# Radio vendor updated object parameters will be saved during radio_set, delete the radio conf file
rm -f $RADIO_CONF

timestamp 0 "$script_name:begin"
print2log 0 DEBUG "$script_name $*"

# Set the init flag to indicate init sequence is in progress
touch $INIT_FLAG

eeprom_partition=wlanconfig
eeprom_tar=eeprom.tar.gz

# Source config.sh on UGW:
[ -e /etc/rc.d/config.sh ] && . /etc/rc.d/config.sh

# The object indexes in the in.conf file are 0 for the first radio and 1 for the second radio (always)
radio0_vendor_index=0
radio1_vendor_index=1
radio2_vendor_index=2
next_object_index=3

# driver_mode can be ap or dut
driver_mode=$1
[ -z "$driver_mode" ] && driver_mode="ap"

# Create softlinks for library functions
cp -s ${ETC_PATH}/fapi_wlan_wave_lib* /tmp/

# Delete the runner file
rm -f ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

# Count number of physical WAVE interfaces
# Read information of physical Wlan interface from wlan_discover output
(. ${ETC_PATH}/fapi_wlan_wave_discover.sh)
. ${CONF_DIR}/fapi_wlan_wave_discover.txt
wave_count=$((PCI_LTQ_COUNT+AHB_WLAN_COUNT))

# If more than 2 Radio bands are detected and one of them is internal, check if the internal Wlan is disabled
if [ $wave_count -gt 2 ] && [ "$AHB_WLAN_COUNT" = "1" ]
then
	disable_ahb=`db2fapi_convert boolean WaveDisableAHB 0`
	# set AHB_WLAN_COUNT=0 and reduce wave_count if needed
	if [ "$disable_ahb" = "1" ]
	then
		AHB_WLAN_COUNT=0
		wave_count=$((wave_count-1))
		echo "AHB_DISABLED=1" >> ${CONF_DIR}/fapi_wlan_wave_discover.txt
		print2log 0 ATTENTION "$script_name: 3 Radios detected, internal Wlan is disabled"
	else
		print2log 0 ATTENTION "$script_name: 3 Radios detected, internal Wlan is enabled"
		echo "AHB_DISABLED=0" >> ${CONF_DIR}/fapi_wlan_wave_discover.txt
	fi
fi

# No Wave interfaces were found, print error, update DB Radio status of all radios to NotPresent and exit script.
if [ "$wave_count" = "0" ]
then
	print2log 0 ERROR "$script_name: No WAVE interfaces found"
	echo "$script_name: No WAVE interfaces found" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	build_wlan_notification "servd" "NOTIFY_WIFI_RADIO_STATUS_CHANGE" "Name:wlan0 Status:NotPresent"
	build_wlan_notification "servd" "NOTIFY_WIFI_RADIO_STATUS_CHANGE" "Name:wlan1 Status:NotPresent"
	build_wlan_notification "servd" "NOTIFY_WIFI_RADIO_STATUS_CHANGE" "Name:wlan2 Status:NotPresent"
	rm -f $INIT_FLAG
	exit 1
fi

# Save indexes used in the DB for each radio
i=0
while [ $i -lt $wave_count ]
do
	echo "wlan${i}_index=$i" >> $INTERFACES_INDEXES
	i=$((i+1))
done
echo "next_interface_index=$i" >> $INTERFACES_INDEXES
. $INTERFACES_INDEXES

echo "cd /tmp" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

# Create softlinks needed in /tmp
echo "cp -s ${DRIVER_PATH}/mtlkroot.ko /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "cp -s ${BINDIR}/fw_scd_file.scd /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "cp -s ${BINDIR}/hw_scd_file.scd /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "cp -s ${DRIVER_PATH}/mtlk.ko /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "cp -s ${IMAGES_PATH}/* /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
[ -e "/lib/modules/3.10.104/compat.ko" ] && echo "cp -s /lib/modules/3.10.104/compat.ko /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
[ -e "/lib/modules/3.10.104/cfg80211.ko" ] && echo "cp -s /lib/modules/3.10.104/cfg80211.ko /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
[ -e "/lib/modules/3.10.104/mac80211.ko" ] && echo "cp -s /lib/modules/3.10.104/mac80211.ko /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
[ -e "/lib/modules/3.10.104/iwlwifi.ko" ] && echo "cp -s /lib/modules/3.10.104/iwlwifi.ko /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
[ -e "/lib/modules/3.10.104/iwlmvm.ko" ] && echo "cp -s /lib/modules/3.10.104/iwlmvm.ko /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

# Yocto read-only workaround: override files if they exist in /nvram/etc/wave_overlay folder
echo "if [ -d /nvram/etc/wave_overlay ]" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "then" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "	for f in /nvram/etc/wave_overlay/*" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "	do" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "		echo \"NOTE:  Overriding  \${f#/nvram/etc/wave_overlay/}\" with file from wave_overlay" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "		cp -s \$f /tmp" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "	done" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "fi" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

# Use the ls.txt file to load files to /tmp if the wave_wlan_debug_ls_txt.sh script exists.
[ -e "${ETC_PATH}/fapi_wlan_wave_debug_tftp_bins.sh" ] && (. ${ETC_PATH}/fapi_wlan_wave_debug_tftp_bins.sh)

# Configure Hotplug
echo "echo ${SBINDIR}/hotplug > /proc/sys/kernel/hotplug" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

# Start udevd and call crda once, for triggering regulatory domain change notifications
# The crda calls should be done only once on the first init. Using flag to detect first init.
echo "udevd_up=\`ps | grep -c udevd\`" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "[ \$udevd_up -gt 1 ] || udevd --daemon" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
if [ ! -e $CRDA_FLAG ]
then
	echo "export COUNTRY=00" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	echo "crda" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	echo "touch $CRDA_FLAG" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
fi

# TEMPORARY: insmod IRE related drivers before Wave driver
[ -e "/lib/modules/3.10.104/compat.ko" ] && echo "insmod compat.ko" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
[ -e "/lib/modules/3.10.104/cfg80211.ko" ] && echo "insmod cfg80211.ko" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
[ -e "/lib/modules/3.10.104/mac80211.ko" ] && echo "insmod mac80211.ko" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

# insmod rtlogoer
echo "insmod mtlkroot.ko cdebug=0 rdebug=0" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
# TODO: add check for insmod success.
# Set MAC address to the logger interface and add it to the bridge
# TODO: currently moved to the start sequence, needs to be moved back to init
#echo "ifconfig rtlog0 hw ether 00:00:00:00:00:00" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
# Read the bridge name from brctl
#bridge_name=`read_bridge_from_db rtlog0 $radio0_vendor_index`
#echo "brctl addif $bridge_name rtlog0" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
#echo "ifconfig rtlog0 up" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
# Create the logger streams
#i=0
#while [ $i -lt $wave_count ]
#do
#	(. $ETC_PATH/wave_wlan_logger_modify $i init)
#      i=$((i+1))
#done
# Load logserver (if exists)
if [ -e ${BINDIR}/logserver ]
then
	echo "cp -s ${BINDIR}/logserver /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	echo "/tmp/logserver -f /tmp/dev/mtlkroot0 -s /tmp/fw_scd_file.scd &" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
fi

# Get calibration file from FLASH only if file doesn't already exist in /tmp/
# Support Puma (/nvram/etc), Havenpark (/nvram) and UGW read_img
echo "if [ ! -e /tmp/cal_wlan0.bin ]" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
echo "then" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
if [ -d /nvram/etc/wave_cal ]
then
	# Command to copy cal_wlan files for PUMA
	echo "	cp /nvram/etc/wave_cal/* /tmp/ 2>/dev/null" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
elif [ -d /nvram ]
then
	echo "	tar xzf /nvram/$eeprom_tar -C /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
else
	# Commands to get cal_wlan files from FLASH in UGW
	echo "	read_img $eeprom_partition /tmp/$eeprom_tar" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	echo "	tar xzf /tmp/$eeprom_tar -C /tmp/" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
fi
# TODO: add verification for calibration extract success.
echo "fi" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

# Insmod WAVE driver
# fastpath enables/disables GSWIP usage. Needed only for GRX350.
fastpath_cmd=""
fastpath0=""
fastpath1=""
fastpath2=""
disable_fastpath0=""
disable_fastpath1=""
disable_fastpath2=""

[ -n "$CONFIG_IFX_CONFIG_CPU" ] && echo "$script_name CONFIG_IFX_CONFIG_CPU = $CONFIG_IFX_CONFIG_CPU" > /dev/console
[ -n "$CONFIG_IFX_MODEL_NAME" ] && echo "$script_name CONFIG_IFX_MODEL_NAME = $CONFIG_IFX_MODEL_NAME" > /dev/console

# If platform is not GRX350, don't set fastpath command and disable fastpath for all interfaces
if [ "$CONFIG_IFX_CONFIG_CPU" != "GRX500" ] && [ "$CONFIG_IFX_CONFIG_CPU" != "GRX750" ] && [ ! -f ${RDKBOS_WIFI_UTIL} ]
then
	disable_fastpath0=1
	disable_fastpath1=1
	disable_fastpath2=1
else
	# Workaround to enable fastpath by default in RDKB-OS
	if [ -f ${RDKBOS_WIFI_UTIL} ]; then
		if [ -n "`lsmod | grep directconnect_datapath`" ]; then
			fastpath0=1
			[ "$wave_count" == "2" ] && fastpath1=1
			[ "$wave_count" == "3" ] && fastpath2=1
		else
			fastpath0=0
			fastpath1=0
			fastpath2=0
		fi
	else
	fastpath0=`db2fapi_convert boolean WaveFastpathEnabled $wlan0_index`
	fastpath1=`db2fapi_convert boolean WaveFastpathEnabled $wlan1_index`
	fastpath2=`db2fapi_convert boolean WaveFastpathEnabled $wlan2_index`
	fi
	# If AHB is enabled, wlan0 doesn't support fastpath
	[ "$AHB_WLAN_COUNT" = "1" ] && fastpath0=0 && disable_fastpath0=1
	fastpath_enabled_count=$((fastpath0+fastpath1+fastpath2))

	if [ $wave_count -gt 1 ]
	then
		# GRX350 A21 supports fastpath on 2 interfaces
		# GRX350 A11 supports fastpath on 1 interface
		# Check if platform is GRX350 A11 with more than 1 interface with fastpath enabled, if so, set wlan0 to fastpath disabled
		[ "$CONFIG_IFX_CONFIG_CPU" = "GRX500" ] && [ "$CONFIG_PACKAGE_KMOD_GRX500_A21" != "1" ] && [ $fastpath_enabled_count -gt 1 ] && fastpath0=0 && disable_fastpath0=1
		fastpath1=",${fastpath1}"
		if [ "$wave_count" = "3" ]
		then
			fastpath2=",${fastpath2}"
		fi
	fi
	fastpath_cmd="fastpath=${fastpath0}${fastpath1}${fastpath2}"
	fastpath1=${fastpath1/,/}
	fastpath2=${fastpath2/,/}
fi

# If AHB is not used, set ahb_off flag
ahb_off_cmd=""
[ $AHB_WLAN_COUNT = 0 ] && ahb_off_cmd="ahb_off=1"
# Set the value for the driver_mode
driver_mode_cmd="$driver_mode"
case $wave_count in
	1)
		driver_mode_cmd="$driver_mode_cmd=1"
		;;
	2)
		driver_mode_cmd="$driver_mode_cmd=1,1"
		;;
	3)
		driver_mode_cmd="$driver_mode_cmd=1,1,1"
		;;
esac

print2log $wlan0_index DEBUG "$script_name: insmod command: insmod mtlk.ko $driver_mode_cmd $fastpath_cmd $ahb_off_cmd"
echo "insmod mtlk.ko $driver_mode_cmd $fastpath_cmd $ahb_off_cmd" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

# TEMPORARY: insmod WCS drivers after setting the GPIOs
[ -e "/lib/modules/3.10.104/iwlwifi.ko" ] && echo "insmod iwlwifi.ko" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
[ -e "/lib/modules/3.10.104/iwlmvm.ko" ] && echo "insmod iwlmvm.ko" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

# TODO: add check for insmod success.
echo "cd - > /dev/null" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

# Init HS2.0 related drivers
[ -e ${ETC_PATH}/wave_wifi_parp_ctrl.sh ] && echo "(. ${ETC_PATH}/wave_wifi_parp_ctrl.sh start)" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
[ -e ${ETC_PATH}/wave_wifi_l2f_ctrl.sh ] && echo "(. ${ETC_PATH}/wave_wifi_l2f_ctrl.sh start)" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

# UGW WORKAROUND: remove wlan interfaces from udev rules (in Yocto this is handled at build time in 80-net-setup-link.rules)
if [ -e /etc/udev/rules.d/70-persistent-net.rules ]
then
	echo "grep -v wlan /etc/udev/rules.d/70-persistent-net.rules > ${CONF_DIR}/tmp_70-persistent-net.rules" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
	echo "mv ${CONF_DIR}/tmp_70-persistent-net.rules /etc/udev/rules.d/70-persistent-net.rules" >> ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
fi

# Set the Radio status in DB to NotPresent if interface is not present
# If less than 3 cards found, update status of Radio3 (wlan2) to NotPresent
[ $wave_count -lt 3 ] && build_wlan_notification "servd" "NOTIFY_WIFI_RADIO_STATUS_CHANGE" "Name:wlan2 Status:NotPresent" "runner"
# If less than 2 cards found, update status of Radio2 (wlan1) to NotPresent
[ $wave_count -lt 2 ] && build_wlan_notification "servd" "NOTIFY_WIFI_RADIO_STATUS_CHANGE" "Name:wlan1 Status:NotPresent" "runner"

# Execute the runner
chmod +x ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}
${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER}

# DEBUG: set debug_save_runner in fapi_wlan_wave_lib_common.sh to save the runner script
[ "$debug_save_runner" ] && cp ${CONF_DIR}/${FAPI_WLAN_WAVE_RUNNNER} ${CONF_DIR}/runner_hw_init.sh

# Create the output configuration file
cat /dev/null > ${OUT_CONF}

update_conf_out "Object_0" "${RADIO_VENDOR_OBJECT}"
[ "$disable_fastpath0" ] && update_conf_out "WaveFastpathEnabled_0" "false" && save_hw_init_out wlan0 0 "WaveFastpathEnabled" "false"

# Read number of antennas from driver
driver_num_of_antennas=`get_driver_num_of_antennas wlan0`

# Set number of antennas, BF-ANTENNA and SOUNDING-DIMENSION from driver to XML
num_antennas_db=`db2fapi_convert regular NumOfAntennas $wlan0_index`
bf_antenna_db=`db2fapi_convert regular VhtBfAntenna $wlan0_index`
sounding_dimension_db=`db2fapi_convert regular VhtSoundingDimension $wlan0_index`
if [ "$driver_num_of_antennas" ]
then
	# Check if need to update DB with new values
	[ $driver_num_of_antennas -lt $num_antennas_db ] && antennas_to_set="$driver_num_of_antennas"
	[ $driver_num_of_antennas -lt $bf_antenna_db ] && vht_bf_antenna_to_set="$driver_num_of_antennas"
	[ $driver_num_of_antennas -lt $sounding_dimension_db ] && vht_sounding_to_set="$driver_num_of_antennas"

	[ -n "$antennas_to_set" ] && update_conf_out "NumOfAntennas_0" "$antennas_to_set" && save_hw_init_out wlan0 0 "NumOfAntennas" "$antennas_to_set"
	[ -n "$vht_bf_antenna_to_set" ] && update_conf_out "VhtBfAntenna_0" "$vht_bf_antenna_to_set" && save_hw_init_out wlan0 0 "VhtBfAntenna" "$vht_bf_antenna_to_set"
	[ -n "$vht_sounding_to_set" ] && update_conf_out "VhtSoundingDimension_0" "$vht_sounding_to_set" && save_hw_init_out wlan0 0 "VhtSoundingDimension" "$vht_sounding_to_set"
fi

# Read driver capability for beamforming.
# If driver doesn't support beamforming, set explicit beamforming, implicit beamforming and vht beamforming disabled
beamforming_support=`iwpriv wlan0 gBfExplicitCap`
beamforming_support=`echo ${beamforming_support##w*:}`
if [ "$beamforming_support" = "0" ]
then
	update_conf_out "WaveExplicitBeamforming_0" "false" && save_hw_init_out wlan0 0 "WaveExplicitBeamforming" "false"
	update_conf_out "WaveImplicitBeamforming_0" "false" && save_hw_init_out wlan0 0 "WaveImplicitBeamforming" "false"
	update_conf_out "VhtSUbeamformerEnabled_0" "false" && save_hw_init_out wlan0 0 "VhtSUbeamformerEnabled" "false"
fi

# If 2 interfaces exist, update parameters for wlan1
if [ "$wave_count" = "2" ]
then
	update_conf_out "Object_1" "${RADIO_VENDOR_OBJECT}"
	[ "$disable_fastpath1" ] && update_conf_out "WaveFastpathEnabled_1" "false" && save_hw_init_out wlan1 1 "WaveFastpathEnabled" "false"

	# Read number of antennas from driver
	driver_num_of_antennas1=`get_driver_num_of_antennas wlan1`

	# Set number of antennas, BF-ANTENNA and SOUNDING-DIMENSION from driver to XML
	num_antennas_db1=`db2fapi_convert regular NumOfAntennas $wlan1_index`
	bf_antenna_db1=`db2fapi_convert regular VhtBfAntenna $wlan1_index`
	sounding_dimension_db1=`db2fapi_convert regular VhtSoundingDimension $wlan1_index`
	if [ "$driver_num_of_antennas1" ]
	then
		# Check if need to update DB with new values
		[ $driver_num_of_antennas1 -lt $num_antennas_db1 ] && antennas_to_set1="$driver_num_of_antennas1"
		[ $driver_num_of_antennas1 -lt $bf_antenna_db1 ] && vht_bf_antenna_to_set1="$driver_num_of_antennas1"
		[ $driver_num_of_antennas1 -lt $sounding_dimension_db1 ] && vht_sounding_to_set1="$driver_num_of_antennas1"

		[ -n "$antennas_to_set1" ] && update_conf_out "NumOfAntennas_1" "$antennas_to_set1" && save_hw_init_out wlan1 1 "NumOfAntennas" "$antennas_to_set1"
		[ -n "$vht_bf_antenna_to_set1" ] && update_conf_out "VhtBfAntenna_1" "$vht_bf_antenna_to_set1" && save_hw_init_out wlan1 1 "VhtBfAntenna" "$vht_bf_antenna_to_set1"
		[ -n "$vht_sounding_to_set1" ] && update_conf_out "VhtSoundingDimension_1" "$vht_sounding_to_set1" && save_hw_init_out wlan1 1 "VhtSoundingDimension" "$vht_sounding_to_set1"
	fi

	# Read driver capability for beamforming.
	# If driver doesn't support beamforming, set explicit beamforming, implicit beamforming and vht beamforming disabled
	beamforming_support1=`iwpriv wlan1 gBfExplicitCap`
	beamforming_support1=`echo ${beamforming_support1##w*:}`
	if [ "$beamforming_support1" = "0" ]
	then
		update_conf_out "WaveExplicitBeamforming_1" "false" && save_hw_init_out wlan1 1 "WaveExplicitBeamforming" "false"
		update_conf_out "WaveImplicitBeamforming_1" "false" && save_hw_init_out wlan1 1 "WaveImplicitBeamforming" "false"
		update_conf_out "VhtSUbeamformerEnabled_1" "false" && save_hw_init_out wlan1 1 "VhtSUbeamformerEnabled" "false"
	fi
fi

# If 3 interfaces exist, update parameters for wlan2
if [ "$wave_count" = "3" ]
then
	update_conf_out "Object_2" "${RADIO_VENDOR_OBJECT}"
	[ "$disable_fastpath2" ] && update_conf_out "WaveFastpathEnabled_2" "false" && save_hw_init_out wlan2 2 "WaveFastpathEnabled" "false"

	# Read number of antennas from driver
	driver_num_of_antennas2=`get_driver_num_of_antennas wlan2`

	# Set number of antennas, BF-ANTENNA and SOUNDING-DIMENSION from driver to XML
	num_antennas_db2=`db2fapi_convert regular NumOfAntennas $wlan2_index`
	bf_antenna_db2=`db2fapi_convert regular VhtBfAntenna $wlan2_index`
	sounding_dimension_db2=`db2fapi_convert regular VhtSoundingDimension $wlan2_index`
	if [ "$driver_num_of_antennas2" ]
	then
		# Check if need to update DB with new values
		[ $driver_num_of_antennas2 -lt $num_antennas_db2 ] && antennas_to_set2="$driver_num_of_antennas2"
		[ $driver_num_of_antennas2 -lt $bf_antenna_db2 ] && vht_bf_antenna_to_set2="$driver_num_of_antennas2"
		[ $driver_num_of_antennas2 -lt $sounding_dimension_db2 ] && vht_sounding_to_set2="$driver_num_of_antennas2"

		[ -n "$antennas_to_set2" ] && update_conf_out "NumOfAntennas_2" "$antennas_to_set2" && save_hw_init_out wlan2 2 "NumOfAntennas" "$antennas_to_set2"
		[ -n "$vht_bf_antenna_to_set2" ] && update_conf_out "VhtBfAntenna_2" "$vht_bf_antenna_to_set2" && save_hw_init_out wlan2 2 "VhtBfAntenna" "$vht_bf_antenna_to_set2"
		[ -n "$vht_sounding_to_set2" ] && update_conf_out "VhtSoundingDimension_2" "$vht_sounding_to_set2" && save_hw_init_out wlan2 2 "VhtSoundingDimension" "$vht_sounding_to_set2"
	fi

	# Read driver capability for beamforming.
	# If driver doesn't support beamforming, set explicit beamforming, implicit beamforming and vht beamforming disabled
	beamforming_support2=`iwpriv wlan2 gBfExplicitCap`
	beamforming_support2=`echo ${beamforming_support2##w*:}`
	if [ "$beamforming_support2" = "0" ]
	then
		update_conf_out "WaveExplicitBeamforming_2" "false" && save_hw_init_out wlan2 2 "WaveExplicitBeamforming" "false"
		update_conf_out "WaveImplicitBeamforming_2" "false" && save_hw_init_out wlan2 2 "WaveImplicitBeamforming" "false"
		update_conf_out "VhtSUbeamformerEnabled_2" "false" && save_hw_init_out wlan2 2 "VhtSUbeamformerEnabled" "false"
	fi
fi

# Map indexes for the objects to return:
# wifi, radio for wlan0
wifi_index=$next_object_index
next_object_index=$((next_object_index+1))
radio_index=$next_object_index
next_object_index=$((next_object_index+1))

# Update number of Radio interfaces created
update_conf_out "Object_${wifi_index}" "$WIFI_OBJECT"
update_conf_out "RadioNumberOfEntries_${wifi_index}" "$wave_count"

# Read country from EEPROM
country_code=`iwpriv wlan0 gEEPROM`
country_code=`echo "$eeprom" | sed -n '/EEPROM country:/{s/EEPROM country:.*\([A-Z?][A-Z?]\)/\1/p}'`

# Update the names of the interfaces created
# Workaround to reverse order of interfaces returned to SL on Haven Park Platform
# (wlan1 is 2.4GHz and wlan0 is 5GHz)
IS_HAVEN_PARK=`cat /proc/cmdline | grep -c BoardID=0xE6`
if [ $IS_HAVEN_PARK -eq 0 ]
then
	# Read the names of the interfaces created
	interfaces_created=`ls /proc/net/mtlk | grep wlan`
	for interface in $interfaces_created
	do
		update_conf_out "Object_${radio_index}" "${RADIO_OBJECT}${radio_index}"
		update_conf_out "Name_${radio_index}" "$interface"
		# Update regulatory domain only if country is set in the EEPROM
		[ -n "$country_code" ] && [ "$country_code" != "??" ] && update_conf_out "RegulatoryDomain_${radio_index}" "$country_code"
		radio_index=$next_object_index
		next_object_index=$((next_object_index+1))
	done
else
	# Haven Park --> Use fixed order of interface names
	echo fapi_wlan_wave_hw_init: HAVEN PARK DETECTED - USING wlan1 as first configured interface > /dev/console
	update_conf_out "Object_${radio_index}" "${RADIO_OBJECT}${radio_index}"
	update_conf_out "Name_${radio_index}" "wlan1"
	radio_index=$next_object_index
	update_conf_out "Object_${radio_index}" "${RADIO_OBJECT}${radio_index}"
	update_conf_out "Name_${radio_index}" "wlan0"
fi

# change the default PCIE power save from: powersave to performance
# this for fixing DMA latancy for more details : WLANSW-4361
# this fix STA cannot connect to 5G AP
# to check setting: cat /sys/module/pcie_aspm/parameters/policy
if [ $IS_HAVEN_PARK -eq 1 ]
then
	echo performance > /sys/module/pcie_aspm/parameters/policy
fi

# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${CONF_DIR}/hw_init_out_conf

print2log $wlan0_index DEBUG "$script_name done"
timestamp $wlan0_index "$script_name:done"
