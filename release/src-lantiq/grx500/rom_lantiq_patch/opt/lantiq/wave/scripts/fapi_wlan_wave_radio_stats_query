#!/bin/sh
# Return the Radio Stats
# Needed object: None or Radio.Stats

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$IN_CONF_SOURCED" ] && in_conf_source

interface_name=$1

# Find the interface index
interface_index=`find_index_from_interface_name $interface_name`

print2log $interface_index DEBUG "$script_name $*"
timestamp $interface_index "$script_name:begin"

# If interface name is not supplied, exit script
[ -z "$interface_name" ] && print2log $interface_index ALERT "$script_name: interface_name is missing. exit execution" && exit 1

# Verify interface is up and ready. If not, exit
[ `check_interface_is_ready $interface_name` = "1" ] && exit

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${CONF_DIR}/radio_stats_in_conf_${interface_name}

# Map the objects indexes to the received objects in the in.conf file
radio_stats_index=`map_param_index Object $RADIO_STATS_OBJECT`

# If an object that needs to be in the output conf wasn't in the input conf, set it with an index
[ -z "$radio_stats_index" ] && radio_stats_index=`get_next_object_index`

# Functions to read the statistics
# Read values from all the VAPs and sum them for the Radio value.

# Get the list of VAPs for this Radio
ifconfig | grep $interface_name > ${CONF_DIR}/ifconfig_res
vaps_list=`get_interfaces_from_ifconfig ${CONF_DIR}/ifconfig_res`

${BINDIR}/mtdump $interface_name TR181HWStat > ${CONF_DIR}/all_vaps

total_bytes_sent=0
total_bytes_received=0
total_packets_sent=0
total_packets_received=0
total_errors_sent=0
total_errors_received=0
total_discard_packets_sent=0
total_discard_packets_received=0
total_plcp_error_count=0
total_fcs_error_count=0
total_invalid_mac_count=0
total_packets_other_received=0
total_noise=0

total_bytes_sent_stats()
{
	total_bytes_sent=`grep "Number of bytes sent successfully" ${CONF_DIR}/all_vaps | awk '{print $1}'`
}

total_bytes_received_stats()
{
	total_bytes_received=`grep "Number of bytes received" ${CONF_DIR}/all_vaps | awk '{print $1}'`
}

total_packets_sent_stats()
{
	total_packets_sent=`grep "Number of packets transmitted" ${CONF_DIR}/all_vaps | awk '{print $1}'`
}

total_packets_received_stats()
{
	total_packets_received=`grep "Number of packets received" ${CONF_DIR}/all_vaps | awk '{print $1}'`
}

total_errors_sent_stats()
{
	total_errors_sent=`grep "Number of Tx packets not transmitted because of errors" ${CONF_DIR}/all_vaps | awk '{print $1}'`
}

total_errors_received_stats()
{
	total_errors_received=`grep "Number of Rx packets that contained errors" ${CONF_DIR}/all_vaps | awk '{print $1}'`
}

total_discard_packets_sent_stats()
{
	total_discard_packets_sent=`grep "Number of Tx packets discarded" ${CONF_DIR}/all_vaps | awk '{print $1}'`
}

total_discard_packets_received_stats()
{
	total_discard_packets_received=`grep "Number of Rx packets discarded" ${CONF_DIR}/all_vaps | awk '{print $1}'`
}

# TODO: how to get the following stats (do we need them?)
total_plcp_error_count_stats()
{
	plcp_header_error=0
	total_plcp_error_count=$((total_plcp_error_count+plcp_header_error))
}

total_fcs_error_count_stats()
{
	total_fcs_error_count=`grep "Number of Rx packets with detected FCS error" ${CONF_DIR}/all_vaps | awk '{print $1}'`
}

total_invalid_mac_count_stats()
{
	invalid_mac_header=0
	total_invalid_mac_count=$((total_invalid_mac_count+invalid_mac_header))
}

total_packets_other_received_stats()
{
	other_mac_received=0
	total_packets_other_received=$((total_packets_other_received+other_mac_received))
}

total_noise_stats()
{
	total_fcs_error_count=`grep "Average noise strength received" ${CONF_DIR}/all_vaps | awk '{print $1}'`
}

# Create the output configuration file and set the capapabilities in it
cat /dev/null > ${OUT_CONF}

# Return only the requested statistics
# If input.conf is empty, return all statistics
if [ `wc -c < ${IN_CONF}` = "0" ]
then
	update_conf_out "Object_${radio_stats_index}" "$RADIO_STATS_OBJECT"
	total_bytes_sent_stats
	update_conf_out "BytesSent_${radio_stats_index}" "$total_bytes_sent"
	total_bytes_received_stats
	update_conf_out "BytesReceived_${radio_stats_index}" "$total_bytes_received"
	total_packets_sent_stats
	update_conf_out "PacketsSent_${radio_stats_index}" "$total_packets_sent"
	total_packets_received_stats
	update_conf_out "PacketsReceived_${radio_stats_index}" "$total_packets_received"
	total_errors_sent_stats
	update_conf_out "ErrorsSent_${radio_stats_index}" "$total_errors_sent"
	total_errors_received_stats
	update_conf_out "ErrorsReceived_${radio_stats_index}" "$total_errors_received"
	total_discard_packets_sent_stats
	update_conf_out "DiscardPacketsSent_${radio_stats_index}" "$total_discard_packets_sent"
	total_discard_packets_received_stats
	update_conf_out "DiscardPacketsReceived_${radio_stats_index}" "$total_discard_packets_received"
	total_plcp_error_count_stats
	update_conf_out "PLCPErrorCount_${radio_stats_index}" "$total_plcp_error_count"
	total_fcs_error_count_stats
	update_conf_out "FCSErrorCount_${radio_stats_index}" "$total_fcs_error_count"
	total_invalid_mac_count_stats
	update_conf_out "InvalidMACCount_${radio_stats_index}" "$total_invalid_mac_count"
	total_packets_other_received_stats
	update_conf_out "PacketsOtherReceived_${radio_stats_index}" "$total_packets_other_received"
	total_noise_stats
	update_conf_out "Noise_${radio_stats_index}" "$total_noise"
fi

while read statistics
do
	stats_name=${statistics%%_*}
	case $stats_name in
		"Object")
			object_index=${statistics##*_}
			object_index=${object_index%%=*}
			object_name=${statistics##*=}
			update_conf_out "Object_${object_index}" "$object_name"
			;;
		"BytesSent")
			total_bytes_sent_stats
			update_conf_out "BytesSent_${object_index}" "$total_bytes_sent"
			;;
		"BytesReceived")
			total_bytes_received_stats
			update_conf_out "BytesReceived_${object_index}" "$total_bytes_received"
			;;
		"PacketsSent")
			total_packets_sent_stats
			update_conf_out "PacketsSent_${object_index}" "$total_packets_sent"
			;;
		"PacketsReceived")
			total_packets_received_stats
			update_conf_out "PacketsReceived_${object_index}" "$total_packets_received"
			;;
		"ErrorsSent")
			total_errors_sent_stats
			update_conf_out "ErrorsSent_${object_index}" "$total_errors_sent"
			;;
		"ErrorsReceived")
			total_errors_received_stats
			update_conf_out "ErrorsReceived_${object_index}" "$total_errors_received"
			;;
		"DiscardPacketsSent")
			total_discard_packets_sent_stats
			update_conf_out "DiscardPacketsSent_${object_index}" "$total_discard_packets_sent"
			;;
		"DiscardPacketsReceived")
			total_discard_packets_received_stats
			update_conf_out "DiscardPacketsReceived_${object_index}" "$total_discard_packets_received"
			;;
		"PLCPErrorCount")
			total_plcp_error_count_stats
			update_conf_out "PLCPErrorCount_${object_index}" "$total_plcp_error_count"
			;;
		"FCSErrorCount")
			total_fcs_error_count_stats
			update_conf_out "FCSErrorCount_${object_index}" "$total_fcs_error_count"
			;;
		"InvalidMACCount")
			total_invalid_mac_count_stats
			update_conf_out "InvalidMACCount_${object_index}" "$total_invalid_mac_count"
			;;
		"PacketsOtherReceived")
			total_packets_other_received_stats
			update_conf_out "PacketsOtherReceived_${object_index}" "$total_packets_other_received"
			;;
		"Noise")
			total_noise_stats
			update_conf_out "Noise_${object_index}" "$total_noise"
			;;
	esac
done < ${IN_CONF}

# Configuration is completed successfully
update_conf_out "wlan_configuration_status" "success"

rm -f ${CONF_DIR}/tmp_ifconfig* ${CONF_DIR}/tmp_mtdump* ${CONF_DIR}/ifconfig_res*

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${CONF_DIR}/radio_stats_out_conf_${interface_name}

print2log $interface_index DEBUG "$script_name done"
timestamp $interface_index "$script_name:$interface_name:done"
